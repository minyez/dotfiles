;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;(server-start)
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Minye Zhang"
      user-mail-address "zmysmile0929@gmail.com"
      )
(setq delete-by-moving-to-trash nil)

(use-package! exec-path-from-shell
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))
)

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Sarasa Term SC" :size 20)
      doom-big-font (font-spec :family "Sarasa Term SC" :size 20))
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; light themes
;(setq doom-theme 'doom-one-light)
;(setq doom-theme 'doom-nord-light)
;; dark themse
;(setq doom-theme 'doom-dark+)
;(setq doom-theme 'doom-spacegrey)
;(setq doom-theme 'doom-peacock)
;(setq doom-theme 'doom-monokai-pro)
;(setq doom-theme 'doom-dracula)
; make theme adapt to time. Modified from
; https://stackoverflow.com/questions/14760567/emacs-auto-load-color-theme-by-time
(defun synchronize-theme ()
    (setq hour
        (string-to-number
        ; get current time by current-times-string
	; hour value occupies 3 characters (11-13)
            (substring (current-time-string) 11 13)))
    (if (member hour (number-sequence 6 19))
        (setq now 'doom-nord-light)
        (setq now 'doom-one))
    (if (equal now doom-theme)
        nil
        (setq doom-theme now)
        (load-theme now t) ) ) ;; end of (defun ...
; run every 2 hour
(run-with-timer 0 7200 'synchronize-theme)

(use-package! projectile
  :config
  (setq projectile-project-search-path '("~/Documents/SelfDevelopment/codes"
                                         "~/Projects"
                                         "~/Documents/SelfDevelopment/Academia"
                                         "~/Documents/SelfDevelopment/Projects/CuMO2/manuscript"
                                         ))
)


; Global variables
;   org_notes : all my org(-roam) notes
;   bibfile : bibliography, now a symlink to my exported zotero biblatex library
;   mz/evil-leader : leader key to unify evil-leader and other keys that I want to emulate as evil-leader
;                    the later usage is mainly when I only want to bind key to particular mode
(setq
 org_notes (concat (getenv "HOME") "/Documents/SelfDevelopment/org-roam")
 bibfile (concat org_notes "/bibliography_macos.bib")
 ;org_notes (concat (getenv "HOME") "/tmp/org-demo") ; for demonstration
 ;bibfile (concat (getenv "HOME") "/Documents/SelfDevelopment/Database/test.bib")
 mz/evil-leader ","
)
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory (format "%s" org_notes))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; set zsh to default shell of vterm
(use-package! vterm
  :config
  (setq vterm-shell "zsh"))

(use-package! evil
  :bind
  (:map evil-insert-state-map
        ("s-i" . evil-escape))
  (:map evil-normal-state-map
        ("s-i" . evil-insert))
  (:map evil-visual-state-map
        ("s-i" . evil-insert))
  :config
  (progn
  (evil-set-initial-state 'delve-mode 'emacs)
  )
)

;(use-package! evil-collection
;  :after evil
;  :ensure t
;  :config
;  (evil-collection-init)
;)

(use-package! evil-snipe
  ;; see L612 of evil-snipe
  :after evil
  :bind
  (:map evil-snipe-parent-transient-map
        ("s-;" . evil-snipe-repeat-reverse))
)

(use-package! ws-butler
  :config
  (setq ws-butler-keep-whitespace-before-point t)
)

(use-package! company
  :config
  (setq 
        company-global-modes
        '(not markdown-mode org-mode erc-mode message-mode help-mode gud-mode)
        ;'(not markdown-mode erc-mode message-mode help-mode gud-mode)
        ; 在这些包中停止使用company
        ; company自动补全中文会导致卡顿
  )
)

;; markdown-mode preview
;; https://blog.bitsandbobs.net/blog/emacs-markdown-live-preview/
;(use-package! simple-httpd
;  :ensure t
;  :config
;  (setq httpd-port 8090)
;  (setq httpd-host (system-name)))
;
;(use-package impatient-mode
;  :ensure t
;  :commands impatient-mode)
;(use-package! markdown-mode
;  :ensure t
;  :mode (("\\.md\\'" . gfm-mode)
;         ("\\.markdown\\'" . markdown-mode))
;  :commands (markdown-mode gfm-mode)
;  :config
;  (setq markdown-command "pandoc -t html5"))
;;; Start Markdown live preview in browser with GitHub CSS
;(defun my-markdown-filter (buffer)
;  (princ
;   (with-temp-buffer
;     (let ((tmp (buffer-name)))
;       (set-buffer buffer)
;       (set-buffer (markdown tmp))
;       (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdn.bootcdn.net/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\"/>
;<body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
;   (current-buffer)))
;(defun my-markdown-preview ()
;  "Preview markdown."
;  (interactive)
;  (unless (process-status "httpd")
;    (httpd-start))
;  (impatient-mode)
;  (imp-set-user-filter 'my-markdown-filter)
;  (imp-visit-buffer))
;; End Markdown live preview

;; Start move-text
(move-text-default-bindings) ; default bindings
;; End move-text
;

(use-package! org-roam
  :init
  (setq org-roam-directory (format "%s" org_notes))
  ;(setq org-roam-completion-system 'helm)
  (setq org-roam-graph-executable "/usr/local/bin/dot")
  ;(setq org-roam-graph-executable "/usr/local/bin/neato")
  (setq org-roam-graph-viewer "/usr/bin/open"
        org-roam-index-file "index.org"
        org-roam-graph-extra-config '(("overlap" . "false")) ; man dot for attributes setup
        )
  (map! :leader
        :prefix "r"
        ;;:desc "Org-Roam-Buffer"       "r" #'org-roam
        ;;:desc "Org-Roam-Insert"       "i" #'org-roam-insert
        ;;:desc "Org-Roam-Find"         "." #'org-roam-find-file ;; removed in V2
        :desc "Org-Roam-Buffer"         "r" #'org-roam-buffer-toggle
        :desc "Org-Roam-Insert"         "i" #'org-roam-node-insert
        :desc "Org-Roam-Find"           "." #'org-roam-node-find   ;; used in V2
        :desc "Org-Roam-Store"          "l" #'org-roam-store-link
        :desc "Org-Roam-Unlinked-Refs"  "u" #'org-roam-unlinked-references
        :desc "Orb-Note-Actions"        "n" #'orb-note-actions
        )
  :bind
  (:map org-roam-mode-map
        (;;("C-c r R" . org-roam)
         ;;("C-c r f" . org-roam-find-file)
         ("C-c r R" . org-roam-buffer-toggle)
         ("C-c r f" . org-roam-node-find)
         ("C-c r L" . org-roam-store-link)
         ("C-c r u" . org-roam-unlinked-references)
         ("C-c r r" . org-roam-find-ref)
         ("C-c r d" . org-roam-find-directory)
         ("C-c r j" . org-roam-jump-to-index)
         ("C-c r b" . org-roam-switch-to-buffer)
         ("C-c r n" . orb-note-actions)
         ("C-c r g" . org-roam-graph))
   :map org-mode-map
        (
         ;;("C-c r i" . org-roam-insert)
         ("C-c r i" . org-roam-node-insert)
         )
  )
;; source: https://github.com/zaeph/.emacs.d/blob/4548c34d1965f4732d5df1f56134dc36b58f6577/init.el
  :config
  (org-roam-setup)
  ;(org-roam-mode +1) ; set to major mode, dropped in V2
  (defun org-roam-search-dup-ids ()
    (let ((org-id-files (org-roam--list-files org-roam-directory))
      org-agenda-files)
    (org-id-update-id-locations))
  )
  (setq org-roam-rename-file-on-title-change nil)
  (setq org-roam-graph-exclude-matcher '("journal"
                                         "slides"
                                         "daily"
                                         "org-agenda.org"
                                         "archive.org"
                                         "read.org"
                                         "work.org"
                                         "exercise.org"
                                         "zatsuyou.org"
                                        ))
  ; use for gnuplot
;  (defun org-init-table-gnuplot()
;    "Create a 2-column table and gnuplot source block for exporting data plot to images directory, used for quick check only"
;    (interactive)
;    (let* 
;      (
;       (title (format "%s" (read-string "Enter data title: ")))
;      )
;         (insert (format "#+NAME: tab-%s\n" title))
;         (insert (format "#+CAPTION: %s\n" title))
;	 (insert "#+ATTR_LATEX: :booktabs t\n")
;	 (insert "| | |\n")
;         (insert (format "#+NAME: gnuplot-%s\n" title))
;	 (insert (format "#+HEADER: :var data=tab-%s\n" title ))
;	 (insert (format "#+HEADER: :exports results :file images/%s.png\n" title))
;	 (insert "#+BEGIN_SRC gnuplot\n")
;	 (insert (format "set title \"%s\"\n" title))
;	 (insert "plot data u 1:2 w lp")
;	 (insert "#+END_SRC\n")
;         (insert (format "#+NAME: fig-%s\n" title))
;         (insert (format "#+CAPTION: %s\n" title))
;	 (insert "#+ATTR_ORG: :width 400\n")
;	 (insert "#+ATTR_LATEX: :width 0.6\\linewidth\n")
;	 (insert (format "#+RESULTS: gnuplot-%s\n" title))
;    ))
)
;


;(add-hook 'after-init-hook 'org-roam-mode)
;(add-hook 'org-mode-hook 'org-roam-mode) ;; V1
;; no more org-roam-mode in org-roam V2
(setq org-roam-v2-ack t) ;; remove V2 warnings after clean upgrade from V1
;; instead run org-mode-setup before the first build of database

;(add-hook 'after-init-hook 'blink-cursor-mode)
(add-hook 'org-mode-hook 'org-cdlatex-mode)
(add-hook 'org-mode-hook 'reftex-mode)
;; render latex block, commented due to performance issue
;(add-hook 'org-mode-hook 'org-fragtog-mode)

; Chinese input setting
(use-package! pangu-spacing
  :config
  (setq pangu-spacing-include-regexp "\\(?:\\(?3:[、。「」！（），：；？]\\)\\|\\(?1:\\cC\\|\\cH\\|\\cK\\)\\)\\(?2:[\(=0-9A-Za-z\\$\\]\\)\\|\\(?1:[=0-9A-Za-z\\$\)]\\)\\(?:\\(?3:[、。「」！（），：；？]\\)\\|\\(?2:\\cC\\|\\cH\\|\\cK\\)\\)")
)

(use-package org-superstar
  :after org
  :hook
  (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-headline-bullets-list '("⋆" "◉" "○" "†" "‡" "∵")) ;✸ ✿ ✭ ❡
)

; https://stackoverflow.com/questions/5457346/lisp-function-to-concatenate-a-list-of-strings
(defun concat-string (list)
  (format nil "~{~a~}" list)
)
(defun remove-line-breaks (string)
  (replace-regexp-in-string "[\n\r]" " " string)
)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(menu-bar-mode nil)
 '(nrepl-message-colors
   '("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3"))
 '(package-selected-packages '(org-roam-server org-journal org-fancy-priorities))
 '(show-paren-mode t)
 '(size-indication-mode t)
 ; suppress the annoying warning when using pyim in org:
 ;   Warning (emacs): org-element--cache: Unregistered buffer modifications detected. Resetting.
 '(warning-suppress-types '((emacs) (:warning)))
 )
 ;'(truncate-lines t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;'(org-document-title ((t (:box 3 :weight bold :height 1.4))))
 '(org-document-title ((t (:weight bold :height 1.0))))
 '(org-meta-line ((t (:slant italic))))
 ;'(org-quote ((t (:slant normal :family "STKaiti"))))
)

;; fix the path to zstd, according to advice by Hlissner
(add-to-list 'jka-compr-compression-info-list
             ["\\.zst\\'"
              "zstd compressing"   "/usr/local/bin/zstd" ("-c" "-q")
              "zstd uncompressing" "/usr/local/bin/zstd" ("-c" "-q" "-d")
              t t "\050\265\057\375"])

;;; auto-save by lazycat
;(use-package! auto-save
;  :load-path "auto-save"
;  :config
;  (auto-save-enable)
;  (setq auto-save-silent t)
;)

(use-package! liberime
  :config
  ;; use rime user data of ibus-rime on my Linux
  ;(setq liberime-user-data-dir "~/.config/ibus/rime")
  ;(liberime-start "/Library/Input Methods/Squirrel.app/Contents/SharedSupport"
  ;                (file-truename "~/.emacs.d/.local/straight/local/build-28.0.50/pyim/rime"))
  ;(liberime-start "~/Library/Rime"
  ;                "~/Library/Rime")
  (setq liberime-user-data-dir "~/Library/Rime")
  (liberime-select-schema "luna_pinyin_simp")
)

(use-package! pyim
  :config
  (global-set-key (kbd "M-\\") 'pyim-convert-string-at-point)
  (setq pyim-dcache-auto-update nil)
  (setq default-input-method "pyim")
  (setq pyim-page-length 9)
  (setq pyim-default-scheme 'rime-quanpin)
  ;; 中文使用全角标点，英文使用半角标点。
  (setq pyim-punctuation-translate-p '(auto yes no))
  ;; 设置选词框的绘制方式, prefer posframe
  (if (posframe-workable-p)
    (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-tooltip 'popup))
  ;;; 探针设置
  ;;; 自定义探针, 进入 org-mode source block 之后自动切换到英文输入
  ;(defun mz/pyim-probe-org-src-block ()
  ;  "自定义探针, 进入 org-mode source block 之后自动切换到英文输入"
  ;  (when (eq major-mode 'org-mode)
  ;    (not (eq (org-in-src-block-p) nil)))
  ;  )
  ;;; auto-english 会根据之前的字符来判断是否切换到英文输入, 输入空格时自动切换到英文
  ;;; 具体可用 describe-function 查看 docstring 来了解
  ;;; 在 latex 块和源码块中全部为英文输入
  ;(setq-default pyim-english-input-switch-functions
  ;            '(pyim-probe-auto-english
  ;              pyim-probe-org-latex-mode
  ;              mz/pyim-probe-org-src-block
  ;              ;pyim-probe-org-structure-template
  ;              pyim-probe-program-mode))
  ;;; 半角标点。主要情形是在行首使用 yasnippet 时有用
  ;(setq-default pyim-punctuation-half-width-functions
  ;            '(pyim-probe-punctuation-line-beginning pyim-probe-punctuation-after-punctuation))
)

(use-package! pyim-liberime
  :after pyim
)

(use-package! pyim-basedict
  :after pyim
  :config
  (pyim-basedict-enable)
)

(use-package! pyim-tsinghua-dict
  :after pyim
  :config
  (pyim-tsinghua-dict-enable)
)
