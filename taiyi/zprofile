# Homebrew initialization
__brew="/opt/homebrew/bin/brew"
if [ ! -x $__brew ]; then
  echo "Homebrew is not found, installing"
  if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
      echo "Warning! brew installation failed"
  fi
fi
eval "$($__brew shellenv)"
unset __brew
# do not auto clean up cmake to avoid failure in rebuilding after homebrew update
# see https://docs.brew.sh/FAQ#how-do-i-keep-old-versions-of-a-formula-when-upgrading
# and https://github.com/Homebrew/homebrew-core/issues/84312
export HOMEBREW_NO_CLEANUP_FORMULAE=cmake,cmake-doc,mpich,gcc,openblas

export XDG_CONFIG_HOME="$HOME/.config"

# get mamba setup by issuing
#    ${HOMEBREW_PREFIX}/opt/micromamba/bin/micromamba shell init -s $(basename "${SHELL}") -p ${HOME}/micromamba
# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="$HOMEBREW_PREFIX/opt/micromamba/bin/micromamba";
export MAMBA_ROOT_PREFIX="$HOME/micromamba";
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    if [ -f "$MAMBA_ROOT_PREFIX/etc/profile.d/micromamba.sh" ]; then
        . "$MAMBA_ROOT_PREFIX/etc/profile.d/micromamba.sh"
    else
        export  PATH="$MAMBA_ROOT_PREFIX/bin:$PATH"  # extra space after export prevents interference from conda init
    fi
fi
unset __mamba_setup
# <<< mamba initialize <<<

# pyenv initialize
# command -v pyenv >/dev/null && eval "$(pyenv init -)"

# rbenv initialize
command -v rbenv >/dev/null && eval "$(rbenv init - zsh)"

# display a fortune
if which fortune >/dev/null 2>&1; then
  echo
  fortune
  echo
fi
