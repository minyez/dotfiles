#!/usr/bin/env bash
# shellcheck disable=SC2139
#
# In this file, I define my often used alias and functions
#
# This is originally in an alias module file, but later I
# found that zsh history fails to record alias there, which
# is not convenient.
#
#=====================================================
# system check for macOS
function is_macos {
  [[ ${OSTYPE} != "${OSTYPE##darwin}" ]]
}

# system check for Linux
function is_linux {
  [[ ${OSTYPE} != "${OSTYPE##linux}" ]]
}

# system check for BSD
function is_bsd {
  [[ ${OSTYPE} != "${OSTYPE##freebsd}" ]]
}

# system check for Solaris
function is_solaris {
  [[ ${OSTYPE} != "${OSTYPE##solaris}" ]]
}

# check the current shell
# https://unix.stackexchange.com/questions/9501/how-to-test-what-shell-i-am-using-in-a-terminal
function _get_current_shell {
  ss="unknown"
  if is_macos || is_bsd; then
    ss="$(ps -p$$ -ocommand=)"
  elif is_linux; then
    ss="$(ps -p$$ -ocmd=)"
  elif is_solaris; then
    ss="$(ps -p$$ -ofname=)"
  fi
  echo "$ss"
}

# check if the current shell is zshell
function is_zsh {
  ss=$(_get_current_shell)
  [[ $ss == "-zsh" ]]
}

# check if the current shell is bash
function is_bash {
  ss=$(_get_current_shell)
  [[ $ss == "-bash" ]]
}

# check if it is on an HPC system
# a more general version would be to check executables (slurmctld, qmgr)
# or environment variables (SLURM, PBS) of scheduler
function is_on_hpc {
  hsn=$(hostname)
  if [[ $hsn == mgmt ]]; then
    return 0
  elif [[ $hsn == talos01 ]]; then
    return 0
  elif [[ $hsn != "${hsn#raven}" ]]; then
    return 0
  elif [[ $hsn != "${hsn#cobra}" ]]; then
    return 0
  elif [[ $hsn != "${hsn#yuan}" ]]; then
    return 0
  fi
  return 1
}

#=====================================================
# macOS specific

# alias "g"-prefixed tools in homebrew coreutils, gawk
if is_macos; then
  alias realpath="grealpath"
  alias sed="gsed"
  alias awk="gawk"
  alias date="gdate"
  # alias make="gmake"
  alias make="remake"
  alias tar="gtar"
  function ls {
    gls "$@"
  }

  export ICD="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
  # enter CloudDocs
  alias cicd="cd \"\$ICD\""
fi

#=====================================================
# Linux specific
if is_linux; then
  alias open="xdg-open"
fi

#=====================================================
# ls
alias ls="ls --color=auto --group-directories-first"
alias ll="ls -lh --time-style=\"+%Y-%m-%d %H:%M:%S\""
alias la="ls -ah"

#=====================================================
# vim
if is_on_hpc; then
  _vi="vi"
  _vim="vim"
else
  _vi="/usr/bin/vim"
  _vim="nvim"
fi
alias vi="$_vi"
alias vim="$_vim"
alias v="$_vim -O "
alias V="$_vim -o "

function _vi4 {
  #1 vim executable
  ##2,3,4,5 4 files to edit
  $1 -O "$4" "$5" -c "split $2" -c 'wincmd l"' -c "split $3"
}
function vi4 {
  _vi4 $_vi "$1" "$2" "$3" "$4"
}
function vim4 {
  _vi4 $_vim "$1" "$2" "$3" "$4"
}

#=====================================================
# directory surfing

# quick navigation to higher-level directoires
if is_on_hpc; then
# avoid overwrite zsh - (cd -)
  if is_zsh; then
    alias -="cd ../"
  fi
  alias ..="cd ../"
  alias ...="cd ../../"
  alias ....="cd ../../../"
  alias .....="cd ../../../../"
  alias ......="cd ../../../../../"
  alias .......="cd ../../../../../../"
fi
alias 1-="cd ../"
alias 2-="cd ../../"
alias 3-="cd ../../../"
alias 4-="cd ../../../../"
alias 5-="cd ../../../../../"
alias 6-="cd ../../../../../../"
alias 7-="cd ../../../../../../../"
alias 8-="cd ../../../../../../../../"
alias 9-="cd ../../../../../../../../../"

# personal directory related, only for local development
if ! is_on_hpc; then
  export M="$HOME/Documents/minyez"
  export MY="$M"
  export MYRM="$HOME/Library/CloudStorage/Dropbox/org-roam"

  alias cm="cd \"\$MY\""
  alias cmd="cd \"\$MY/Snippets/dotfiles\""
  alias cmr="cd \"\$MYRM\""

  function practice {
    PATH_PRACTICE="$M/codes/code-practice"
    pdir="$PATH_PRACTICE/$1";
    if [[ -d "$pdir" ]]; then
      cd "$pdir" || return 1
    else
      echo "\"$1\" not found under $PATH_PRACTICE"; return 1;
    fi
  }
fi

#=====================================================
# quick command

# clear is too long
alias c="clear"

# c and p are too far
alias af="cp"
alias ca="cp -a"

#=====================================================
# tar

export COPYFILE_DISABLE=1
alias untargz="tar -zxf "
alias untarbz="tar -jxf "

function targz {
  args=("$@")
  mkdir "$1" && cp -a "${args[@]:1}" "$1" && tar --remove-files -zcf "${1}.tar.gz" "${1}"
}

function tarbz {
  args=("$@")
  mkdir "$1" && cp -a "${args[@]:1}" "$1" &&  tar --remove-files -jcf "${1}.tar.bz" "${1}"
}

function targzd {
  tar -zcf "${1}.tar.gz" "${1}"
}

#=====================================================
# data related

# today, isoformat
alias td="date +\"%Y-%m-%d\""
# datetime, isoformat
alias dt="date +\"%Y-%m-%d %H:%M:%S\""
# datetime with time zone, isoformat
alias dtz="date +\"%Y-%m-%d %H:%M:%S %z\""
# datetime, org-mode timestamp
alias odt="date +\"%Y-%m-%d %a %H:%M\""

alias mktd="mkdir \$(date +\"%Y-%m-%d\")"
alias cdtd="cd \$(date +\"%Y-%m-%d\")"

#=====================================================
# module related
alias ma="module avail"
alias mls="module list"
alias mrl="module reload"
alias ms="module show"
alias mld="module load"
alias mul="module unload"

#=====================================================
# git related
alias gih="git rev-parse --short HEAD"
alias gib="git branch --show-current"

# add git alias in bash shell. In zshell, they are defined by the omz plugin
if ! is_zsh; then
  alias gst="git status"
  alias g=git
  alias ga='git add'
  alias gaa='git add --all'
  alias gb='git branch'
  alias gbD='git branch --delete --force'
  alias gba='git branch --all'
  alias gbd='git branch --delete'
  alias gbl='git blame -w'
  alias gbm='git branch --move'
  alias gbnm='git branch --no-merged'
  alias gbr='git branch --remote'
  alias gbs='git bisect'
  alias gbsb='git bisect bad'
  alias gbsg='git bisect good'
  alias gbsn='git bisect new'
  alias gbso='git bisect old'
  alias gbsr='git bisect reset'
  alias gbss='git bisect start'
  alias gc='git commit --verbose'
  alias 'gc!'='git commit --verbose --amend'
  alias gcB='git checkout -B'
  alias gca='git commit --verbose --all'
  alias 'gca!'='git commit --verbose --all --amend'
  alias gcam='git commit --all --message'
  alias 'gcan!'='git commit --verbose --all --no-edit --amend'
  alias 'gcans!'='git commit --verbose --all --signoff --no-edit --amend'
  alias gcas='git commit --all --signoff'
  alias gcasm='git commit --all --signoff --message'
  alias gcb='git checkout -b'
  alias gcf='git config --list'
  alias gcl='git clone --recurse-submodules'
  alias gclean='git clean --interactive -d'
  alias gcmsg='git commit --message'
  alias 'gcn!'='git commit --verbose --no-edit --amend'
  alias gco='git checkout'
  alias gcor='git checkout --recurse-submodules'
  alias gcount='git shortlog --summary --numbered'
  alias gcp='git cherry-pick'
  alias gcpa='git cherry-pick --abort'
  alias gcpc='git cherry-pick --continue'
  alias gcs='git commit --gpg-sign'
  alias gcsm='git commit --signoff --message'
  alias gcss='git commit --gpg-sign --signoff'
  alias gcssm='git commit --gpg-sign --signoff --message'
  alias gd='git diff'
  alias gdca='git diff --cached'
  alias gdct='git describe --tags $(git rev-list --tags --max-count=1)'
  alias gdcw='git diff --cached --word-diff'
  alias gds='git diff --staged'
  alias gdt='git diff-tree --no-commit-id --name-only -r'
  alias gdup='git diff @{upstream}'
  alias gdw='git diff --word-diff'
  alias gf='git fetch'
  alias gfa='git fetch --all --prune --jobs=10'
  alias gfg='git ls-files | grep'
  alias gfo='git fetch origin'
  alias gg='git gui citool'
  alias gga='git gui citool --amend'
  alias ghh='git help'
  alias gib='git branch --show-current'
  alias gignore='git update-index --assume-unchanged'
  alias gih='git rev-parse --short HEAD'
  alias gl='git pull'
  alias glg='git log --stat'
  alias glgg='git log --graph'
  alias glgga='git log --graph --decorate --all'
  alias glgm='git log --graph --max-count=10'
  alias glgp='git log --stat --patch'
  alias glo='git log --oneline --decorate'
  alias globurl='noglob urlglobber '
  alias glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
  alias glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
  alias glog='git log --oneline --decorate --graph'
  alias gloga='git log --oneline --decorate --graph --all'
  alias glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
  alias glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
  alias glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
  alias gm='git merge'
  alias gma='git merge --abort'
  alias gms='git merge --squash'
  alias gmtl='git mergetool --no-prompt'
  alias gmtlvim='git mergetool --no-prompt --tool=vimdiff'
  alias gp='git push'
  alias gpd='git push --dry-run'
  alias gpf='git push --force-with-lease --force-if-includes'
  alias 'gpf!'='git push --force'
  alias gpoat='git push origin --all && git push origin --tags'
  alias gpod='git push origin --delete'
  alias gpr='git pull --rebase'
  alias gpra='git pull --rebase --autostash'
  alias gprav='git pull --rebase --autostash -v'
  alias gpristine='git reset --hard && git clean --force -dfx'
  alias gprv='git pull --rebase -v'
  alias gpu='git push upstream'
  alias gpv='git push --verbose'
  alias gr='git remote'
  alias gra='git remote add'
  alias grb='git rebase'
  alias grba='git rebase --abort'
  alias grbc='git rebase --continue'
  alias grbi='git rebase --interactive'
  alias grbo='git rebase --onto'
  alias grbs='git rebase --skip'
  alias grev='git revert'
  alias grh='git reset'
  alias grhh='git reset --hard'
  alias grhk='git reset --keep'
  alias grhs='git reset --soft'
  alias grm='git rm'
  alias grmc='git rm --cached'
  alias grmv='git remote rename'
  alias grrm='git remote remove'
  alias grs='git restore'
  alias grset='git remote set-url'
  alias grss='git restore --source'
  alias grst='git restore --staged'
  alias grt='cd "$(git rev-parse --show-toplevel || echo .)"'
  alias gru='git reset --'
  alias grup='git remote update'
  alias grv='git remote --verbose'
  alias gsb='git status --short --branch'
  alias gsd='git svn dcommit'
  alias gsh='git show'
  alias gsi='git submodule init'
  alias gsps='git show --pretty=short --show-signature'
  alias gsr='git svn rebase'
  alias gss='git status --short'
  alias gst='git status'
  alias gsta='git stash push'
  alias gstaa='git stash apply'
  alias gstall='git stash --all'
  alias gstc='git stash clear'
  alias gstd='git stash drop'
  alias gstl='git stash list'
  alias gstp='git stash pop'
  alias gsts='git stash show --patch'
  alias gstu='gsta --include-untracked'
  alias gsu='git submodule update'
  alias gsw='git switch'
  alias gswc='git switch --create'
  alias gta='git tag --annotate'
  function _gtl()
  {
    git tag --sort=-v:refname -n --list "${1}*"
    noglob gtl
  }
  alias gtl="noglob _gtl"
  alias gts='git tag --sign'
  alias gtv='git tag | sort -V'
  alias gunignore='git update-index --no-assume-unchanged'
  alias gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1'
  alias gwch='git whatchanged -p --abbrev-commit --pretty=medium'
  alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
  alias gwt='git worktree'
  alias gwta='git worktree add'
  alias gwtls='git worktree list'
  alias gwtmv='git worktree move'
  alias gwtrm='git worktree remove'
fi

function gac {
# Auto commit
  datetime=$(date +"%Y-%m-%d %H:%M:%S")
  details=$(git status --porcelain)
  tmpf=$(mktemp)
  echo -e "Auto commit: $datetime\n\n" > "$tmpf"
  echo "$details" >> "$tmpf"
  git commit -F "$tmpf"
}

#=====================================================
# ssh related

# verbose rsync with general object and cache files excluded
rsync_exclude="--exclude '*.exe' --exclude '.DS_Store' --exclude '*.o' --exclude __pycache__ --exclude '*.pyc' --exclude '*.mod' --exclude '.pytest_cache'"
info_opt="--info=progress2 --human-readable"
alias scsyc="rsync $rsync_exclude -vazru $info_opt "
alias scsycfoc="rsync $rsync_exclude -vazr  $info_opt "
alias scsycdel="rsync $rsync_exclude --remove-source-files -vazru $info_opt "

unset info_opt

# sync directory structure from/to HPC center
# a general wrapper to sync to
# $1: HPC ssh target  $2: absolute home dir on HPC
function _sync2 {
  relap="$(realpath . --relative-to="$HOME/")"
  _info_opt="--human-readable"
  if [[ -n "$rsyncopts" ]]; then
    sh -c "rsync --rsync-path='mkdir -p $2/$relap; rsync' $rsyncopts -vazru $(eval echo $_info_opt) '$HOME/$relap' $1:"$2/$(dirname "$relap")""
    # rsync --rsync-path="mkdir -p ~/$relap; rsync" $rsyncopts -vazru $info_opt "$HOME/$relap" $1:"$2/$(dirname $relap)"
  elif [[ -n "$rsyncex" ]]; then
    rsync --rsync-path="mkdir -p $2/$relap; rsync" --exclude "$rsyncex" -vazru $(eval echo $_info_opt) "$HOME/$relap" $1:"$2/$(dirname $relap)"
  else
    rsync --rsync-path="mkdir -p $2/$relap; rsync" -vazru $(eval echo $_info_opt) "$HOME/$relap" $1:"$2/$(dirname $relap)"
  fi
  unset _info_opt
  unset relap
}

# a general wrapper to sync from
# $1: ssh target  $2: absolute home dir on HPC
function _syncf {
  relap="$(realpath . --relative-to="$HOME/")"
  # _info_opt="--info=progress2 --human-readable"
  _info_opt="--human-readable"
  _rsync_exclude="--exclude '.DS_Store' --exclude '*.o' --exclude __pycache__ --exclude '*.pyc' --exclude '*.mod' --exclude '.pytest_cache'"
  if [[ -n "$rsyncopts" ]]; then
    sh -c "rsync --rsync-path='mkdir -p $2/$relap; rsync' $(eval echo $_rsync_exclude) $rsyncopts -vazru $(eval echo $_info_opt) $1:'$2/$relap' "$HOME/$(dirname "$relap")""
    # rsync --rsync-path="mkdir -p ~/$relap; rsync" $rsyncopts -vazru $info_opt $1:"$2/$relap" "$HOME/$(dirname "$relap")"
  elif [[ -n "$rsyncex" ]]; then
    echo "rsync --rsync-path=\"mkdir -p $2/$relap; rsync\" $_rsync_exclude --exclude \"$rsyncex\" -vazru $_info_opt $1:$2/$relap $HOME/$(dirname "$relap")"
    rsync --rsync-path="mkdir -p $2/$relap; rsync" $(eval echo $_rsync_exclude) --exclude "$rsyncex" -vazru $(eval echo $info_opt) $1:"$2/$relap" "$HOME/$(dirname "$relap")"
  else
    echo "rsync --rsync-path=\"mkdir -p $2/$relap; rsync\" $_rsync_exclude -vazru $_info_opt $1:$2/$relap $HOME/$(dirname "$relap")"
    rsync --rsync-path="mkdir -p $2/$relap; rsync" $(eval echo $_rsync_exclude) -vazru $(eval echo $info_opt) $1:"$2/$relap" "$HOME/$(dirname "$relap")"
  fi
  unset _rsync_exclude
  unset _info_opt
  unset relap
}

# HPC related sync, only added to non-HPC case
if ! is_on_hpc; then
  # PKU-big-data server
  alias sync2bd="_sync2 phbd /gpfs/share/home/1501210186"
  alias syncfbd="_syncf phbd /gpfs/share/home/1501210186"

  # IOP Huairou
  alias sync2hr="_sync2 iophr /home/zhangmy"
  alias syncfhr="_syncf iophr /home/zhangmy"

  # CAS XDB
  alias sync2xd="_sync2 xdb /public/home/zhangmy_xdb"
  alias syncfxd="_syncf xdb /public/home/zhangmy_xdb"

  # CAS Yuan
  alias sync2y="_sync2 yuan /home/users/zhangmy"
  alias syncfy="_syncf yuan /home/users/zhangmy"

  # y9000k laptop
  alias sync2y9="_sync2 y9k /home/minyez"
  alias syncfy9="_syncf y9k /home/minyez"

  # MPCDF Cobra
  alias sync2cob="_sync2 cobra /u/minyez"
  alias syncfcob="_syncf cobra /u/minyez"

  # MPCDF Raven
  alias sync2rav="_sync2 raven /u/minyez"
  alias syncfrav="_syncf raven /u/minyez"

  # MPCDF Talos
  alias sync2ta="_sync2 talos /u/minyez"
  alias syncfta="_syncf talos /u/minyez"

  # MPCDF Talos, scratch
  alias sync2tas="_sync2 talos /u/minyez/scratch"
  alias syncftas="_syncf talos /u/minyez/scratch"

  # NHR platform
  alias sync2nhr="_sync2 nhr /scratch/projects/bep00114/myz_temp"
  alias syncfnhr="_syncf nhr /scratch/projects/bep00114/myz_temp"

  # FHI laptop platform
  alias sync2fhi="_sync2 fhi /home/minyez"
  alias syncffhi="_syncf fhi /home/minyez"

  # Emmy center, test account
  alias sync2em="_sync2 emmy /user/minye.zhang/u13909"
  alias syncfem="_syncf emmy /user/minye.zhang/u13909"
fi

#=====================================================
# slurm related

if is_on_hpc; then
# enter working directory
  function ej()
  {
    wkd=$(sacct -j $1 -o WorkDir%1000 | awk 'FNR == 3 {print $1}')
    cd "$wkd"
  }
# query my jobs
# --me is not available in slurm 19.05.08. For portability, use -u (--user)
  alias sq="squeue -u $USER -o '%.8i %.18j %.2t %.8M %.3D %.10L %Z'"
# query jobs in my group. Group is obtained by checking accounting of jobs by sacct
  _SLURM_GROUP="$(sacct -n --starttime 1900-01-01 --format=group | head -1)"
  alias sqg="squeue -o '%g %.18j %.8u %.10M %.6D %R' | grep $_SLURM_GROUP"
# query the number of all jobs, to see the load of the HPC
  alias sqwc="squeue | wc -l"

# show details of a job
  alias showjob="scontrol show job "
# show details of a node
  alias shownode="scontrol show node "

# get my jobids
  function _getmyjobids() {
    squeue -u "$USER" -h -o "%A"
  }
  function _getmyrunjobids() {
    squeue -u "$USER" -h -o "%A %T" | awk '/RUNNING/ {print $1}'
  }
# show the start time of a job
  function showjobst() {
    [[ -z "$1" ]] && echo "Usage: showjobst <jobid>" && return 1
    scontrol show job $1 | grep "StartTime="
  }

# show the start time of all my jobs
  function showjobstall() {
    _getmyjobids | xargs -I {} scontrol show job {} | grep "StartTime="
  }
  alias sjta="showjobstall"

# sort and print the working directories of all my jobs
  function showjobdirall() {
    # alljobss=$(squeue -u $(whoami) -h -o "%A" | xargs -I {} scontrol show job {} | grep "WorkDir=" | awk -F= '{print $2}')
    alljobss=$(_getmyjobids)
    # convert to array
    alljobs=($alljobss)
    cwd=$(pwd)
    for j in "${alljobs[@]}"; do echo -n "$j "; realpath "$(scontrol show job $j | grep 'WorkDir=' | awk -F= '{print $2}')" --relative-to="$cwd"; done | sort
  }
  alias sjda="showjobdirall"

# sort and print the working directories of my running jobs
  function showjobdirrun() {
    runjobss=$(_getmyrunjobids)
    # convert to array
    runjobs=($runjobss)
    cwd=$(pwd)
    for j in "${runjobs[@]}"; do echo -n "$j "; realpath "$(scontrol show job $j | grep 'WorkDir=' | awk -F= '{print $2}')" --relative-to="$cwd"; done | sort
  }

  function showjobpwd() {
    cwd="$(pwd)"
    jobids=($(_getmyjobids))
    for j in "${jobids[@]}"; do
      d="$(echo $(sacct -j $j -o WorkDir%1000 -n))"
      if [[ "$d" == "$cwd" ]] || [[ "$d" == "$cwd/./" ]] || [[ "$d" == "$cwd/" ]]; then
        echo $j
        break
      fi
    done
  }
fi

#=====================================================
# Scientific programs related
if is_macos; then
  alias vesta="/Applications/VESTA.app/Contents/MacOS/VESTA "
fi

# vim: filetype=sh
